>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<
 ___     _    _            __   _  _                __      __
| _ )_ _(_)__| |___   ___ / _| | \| |___ _  _ _ _ __\ \    / /__ _ _ _ __
| _ \ '_| / _` / -_) / _ \  _| | .` / -_) || | '_/ _ \ \/\/ / _ \ '_| '  \
|___/_| |_\__,_\___| \___/_|   |_|\_\___|\_,_|_| \___/\_/\_/\___/_| |_|_|_|

>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<

I wrote this code back in the fall of 2014, while I was teaching myself python
(and getting back into coding for the first time in over a decade). As it
stands, it's fast, loose, and scarcely documented, but hopefully shouldn't be
too hard to decipher. I'll try to tidy it up sometime soon.

The programme evolves a population of 'worms' that are each controlled by a
little neural net. The genetic algorithm used is my own implementation of NEAT
(Neuro-Evolutionary Augmented Topologies), which allows for both synaptic
weights, and, more interestingly, neural architecture, to be adjusted by the
evolutionary process, using a form of sexual reproduction that is not quite so
destructive of neural structure as a naive, combinatory approach to mating might
be.

The worms grow larger as they consume the red 'apples'. When they've eaten
enough, they go into heat, after which they may mate with any other in-heat worm
that they touch (sexual reproduction is genderless in the wormosphere). A child
is produced, which is added to the population on the spot. Over time, worms will
shrink if they don't consume fresh apples, and when they reach a length of zero,
they die. (With a last ditch chance being offered to them by starvation-induced
mutations.)

Cannibal worms can be added to the population, if desired. Their occurrence has
a set frequency, but is random (a cannibal child can be born to non-cannibal
parents, and vice versa).

Have fun!

>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<

PS: to install the dependencies, use:

pip2 install matplotlib

and get pylab from your favourite repository.

>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<>><<
